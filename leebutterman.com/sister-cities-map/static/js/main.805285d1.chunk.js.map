{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initSqlJS","require","async","initialViewState","longitude","latitude","zoom","pitch","bearing","App","props","placeToZoom","decodeURI","window","location","hash","slice","state","searchboxtext","viewState","onlyFar","only100kTitles","farsims","Set","allsims","locateFile","f","then","SQL","makeAutocomplete","this","loadPages","fetch","resp","arrayBuffer","b","autocompleteBuffer","loadSims","queries","concat","map","isFar","Array","from","length","v","i","url","column","sink","eachLimit","done","a","Table","table","array","getColumn","toArray","add","setState","simsloaded","pages","lng","lat","title","characterSet","db","Database","Uint8Array","count","dlat","sidelength","dlng","didx","Math","round","density","Float32Array","rankInDensity","sizes","max","pow","log1p","min","onHover","onClick","makeDensityHeatmap","TextLayer","id","data","pickable","backgroundColor","getText","d","index","get","getSize","sizeMaxPixels","sizeUnits","wrapLongitude","fontFamily","getPosition","target","ScatterplotLayer","radiusMinPixels","radiusMaxPixels","getRadius","object","getFillColor","getLineColor","layers","lhsSims","pagepick","pageclick","pointLayer","finishedZoomOnLoad","sims","titleProp","titleLayer","activePageHighlight","firstSuggestion","inputToLabelledIds","input","find","label","initialMove","zoomTo","pageIndex","value","anchor","onTransitionEnd","picked","setTimeout","makeTitles","makePoints","push","context","pagepickcoords","pagesims","values","c","filter","n","sort","viewport","pagesimlats","p","pagesimlngs","pagesimrgbs","project","sourceX","sourceY","pagesimangles","targetX","targetY","atan2","PI","shimFromCenter","join","simlines","LineLayer","getWidth","getSourcePosition","getTargetPosition","getColor","monochromesimtexts","getAngle","getTextAnchor","simIndicesByAngle","color","name","autocompleteIsDisabled","type","checked","onChange","e","confirm","htmlFor","disabled","options","filterOption","onInputChange","isDisabled","placeholder","key","href","preventDefault","style","display","controller","onViewStateChange","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","t","smoothstep","React","Component","inputToRowids","statement","prepare","bind","inputToFTSQuery","step","getAsObject","rowid","s","toLocaleLowerCase","split","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.805285d1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { FlyToInterpolator } from '@deck.gl/core';\nimport { ScatterplotLayer, TextLayer, LineLayer } from '@deck.gl/layers';\nimport { Table } from 'apache-arrow';\nimport Select from 'react-select';\nconst initSqlJS = require('sql.js');\nconst async = require('async');\n\nconst initialViewState = {\n  longitude: -73.99,\n  latitude: 40.69,\n  zoom: 10,\n  pitch: 0,\n  bearing: 0,\n}\n\nexport function utf8vectorToAtlas(strings) {\n  return ([\" \",\"!\",\"\\\"\",\"$\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\"-\",\".\",\"/\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\":\",\";\",\"=\",\"?\",\"@\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"`\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"~\",\"«\",\"°\",\"³\",\"´\",\"·\",\"º\",\"»\",\"½\",\"À\",\"Á\",\"Â\",\"Ä\",\"Å\",\"Æ\",\"Ç\",\"È\",\"É\",\"Ì\",\"Í\",\"Î\",\"Ð\",\"Ñ\",\"Ò\",\"Ó\",\"Ô\",\"Õ\",\"Ö\",\"×\",\"Ø\",\"Ú\",\"Ü\",\"Ý\",\"Þ\",\"ß\",\"à\",\"á\",\"â\",\"ã\",\"ä\",\"å\",\"æ\",\"ç\",\"è\",\"é\",\"ê\",\"ë\",\"ì\",\"í\",\"î\",\"ï\",\"ð\",\"ñ\",\"ò\",\"ó\",\"ô\",\"õ\",\"ö\",\"ø\",\"ù\",\"ú\",\"û\",\"ü\",\"ý\",\"þ\",\"ÿ\",\"Ā\",\"ā\",\"ă\",\"Ą\",\"ą\",\"Ć\",\"ć\",\"Ċ\",\"ċ\",\"Č\",\"č\",\"Ď\",\"ď\",\"Đ\",\"đ\",\"Ē\",\"ē\",\"ĕ\",\"ė\",\"ę\",\"ě\",\"Ğ\",\"ğ\",\"Ġ\",\"ġ\",\"Ģ\",\"ģ\",\"Ħ\",\"ħ\",\"ĩ\",\"Ī\",\"ī\",\"į\",\"İ\",\"ı\",\"Ķ\",\"ķ\",\"Ļ\",\"ļ\",\"Ľ\",\"ľ\",\"Ł\",\"ł\",\"ń\",\"Ņ\",\"ņ\",\"Ň\",\"ň\",\"ŋ\",\"Ō\",\"ō\",\"ŏ\",\"Ő\",\"ő\",\"Œ\",\"œ\",\"ŕ\",\"Ř\",\"ř\",\"Ś\",\"ś\",\"ŝ\",\"Ş\",\"ş\",\"Š\",\"š\",\"Ţ\",\"ţ\",\"Ť\",\"ť\",\"ũ\",\"Ū\",\"ū\",\"ŭ\",\"ů\",\"ű\",\"ų\",\"Ŵ\",\"ŵ\",\"ŷ\",\"Ź\",\"ź\",\"Ż\",\"ż\",\"Ž\",\"ž\",\"Ə\",\"ơ\",\"Ư\",\"ư\",\"ǁ\",\"ǂ\",\"ǃ\",\"ǫ\",\"Ǵ\",\"ǵ\",\"Ș\",\"ș\",\"Ț\",\"ț\",\"ə\",\"ʔ\",\"ʹ\",\"ʻ\",\"ʼ\",\"ʽ\",\"ʿ\",\"̀\",\"́\",\"̄\",\"̨\",\"̱\",\"Π\",\"ά\",\"έ\",\"α\",\"γ\",\"η\",\"ι\",\"λ\",\"ν\",\"ο\",\"ρ\",\"τ\",\"υ\",\"φ\",\"і\",\"ا\",\"ة\",\"ت\",\"ح\",\"ف\",\"ḍ\",\"ḏ\",\"ḥ\",\"ḩ\",\"Ḱ\",\"ḱ\",\"Ḵ\",\"ḵ\",\"Ḷ\",\"ḷ\",\"ḻ\",\"ṇ\",\"ṟ\",\"ṣ\",\"ṭ\",\"ṯ\",\"ẁ\",\"Ẕ\",\"ạ\",\"Ả\",\"ả\",\"Ấ\",\"ấ\",\"ầ\",\"ẩ\",\"ẫ\",\"ậ\",\"ắ\",\"ằ\",\"ẵ\",\"ặ\",\"Ẹ\",\"ẹ\",\"ẻ\",\"ẽ\",\"ế\",\"ề\",\"ể\",\"ễ\",\"ệ\",\"ỉ\",\"ị\",\"ọ\",\"ỏ\",\"ố\",\"ồ\",\"ổ\",\"ỗ\",\"ộ\",\"ớ\",\"ờ\",\"ở\",\"ợ\",\"ụ\",\"ủ\",\"Ứ\",\"ứ\",\"ừ\",\"ử\",\"ữ\",\"ự\",\"ỳ\",\"ỷ\",\"ỹ\",\"–\",\"—\",\"‘\",\"’\",\"“\",\"”\",\"†\",\"•\",\"′\",\"№\",\"−\",\"々\",\"の\",\"ガ\",\"ヒ\",\"モ\",\"ン\",\"人\",\"族\",\"ꞌ\"]);\n  // cmon champ we don't have four whole seconds to run through over a million strings, this is only 2019, we are but simple people\n  // if you do, feel free to comment out that return\n  console.log(Date.now());\n  const atlas = new Set();\n  for(let i = 0 ; i < strings.length; i++ ) {\n    const s = strings.get(i);\n    for(let j = s.length; j-- > 0 ; ) {\n      atlas.add(s[j]);\n    }\n  }\n  const sortedAtlas = Array.from(atlas); sortedAtlas.sort();\n  console.log(JSON.stringify(sortedAtlas));\n  console.log(Date.now());\n  return atlas;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    const placeToZoom = decodeURI(window.location.hash.slice(1));\n    this.state = {placeToZoom, searchboxtext: \"\", viewState: initialViewState, onlyFar: true, only100kTitles: true, farsims: (new Set()), allsims: (new Set())};\n    initSqlJS({locateFile: f => `./${f}`}).then(SQL => {\n      this.state.SQL = SQL;\n      this.makeAutocomplete();\n    });\n  }\n  componentDidMount() {\n    this.loadPages()\n    fetch('./autocomplete.db').then(resp => resp.arrayBuffer().then(b => {\n      this.state.autocompleteBuffer = b;\n      this.makeAutocomplete()\n    }));\n    this.loadSims()\n  }\n  loadSims() {\n    const queries = [].concat(...[true, false].map(isFar => Array.from({length: 20}, (v,i) =>\n      ({url: `./tops${isFar ? \"Far\": \"\"}Packed.ps${i+1}.arrow`,\n        column: `ps${i+1}`,\n        sink: (isFar ? this.state.farsims : this.state.allsims)}))));\n    async.eachLimit(queries, 4, async ({url, column, sink}, done) => {\n      const table = await Table.from(fetch(url));\n      const array = table.getColumn(column).toArray();\n      sink.add(array);\n      this.setState({simsloaded: this.state.farsims.length + this.state.allsims.length});\n      done();\n    })\n  }\n  loadPages() {\n    Table.from(fetch(\"./pages.noindex.arrow\")).then(pages => this.setState({\n      pages,\n      lng: pages.getColumn('lng').toArray(),\n      lat: pages.getColumn('lat').toArray(),\n      title: pages.getColumn('title'),\n      characterSet: utf8vectorToAtlas(pages.getColumn('title')),\n    }));\n  }\n  makeAutocomplete() {\n    if(this.state.SQL && this.state.autocompleteBuffer) {\n      this.setState({db: new this.state.SQL.Database(new Uint8Array(this.state.autocompleteBuffer))});\n    }\n  }\n  makeDensityHeatmap({lng, lat, count, sidelength}) {\n    const dlat = sidelength;\n    const dlng = dlat * 2;\n    const didx = (longitude,latitude) => Math.round((dlng-1)/(longitude+180))*dlat+Math.round((dlat-1)/(latitude+90));\n    const density = new Float32Array(dlat * dlng);\n    const rankInDensity = Float32Array.from({length: count}, (v,i) => ++density[didx(lng[i],lat[i])] );\n    const sizes = Float32Array.from({length: count}, (v,i) => Math.max(8.57, 1024 * 1024 * 32 / Math.pow(i + 4, 0.75) / Math.log1p(Math.pow(rankInDensity[i], 30) * Math.pow(Math.min(100*(i+1),density[didx(lng[i],lat[i])]),1.5))));\n    return ({ density, rankInDensity, sizes });\n  }\n  makeTitles({lng, lat, title, count, characterSet, onHover, onClick}) {\n    const {sizes} = this.makeDensityHeatmap({lng, lat, count, sidelength: 10000});\n    return (new TextLayer({\n      id: `titles${count}`,\n      data: {length: count},\n      pickable: true,\n      onHover,\n      onClick,\n      characterSet,\n      backgroundColor: [255,230,170],\n      getText: (d,{index}) => `  ${title.get(count - 1 - index)}  `,\n      getSize: (d,{index}) => sizes[count - 1 - index],\n      sizeMaxPixels: 30,\n      sizeUnits: 'meters',\n      wrapLongitude: true,\n      fontFamily: '\"Roboto Slab\"',\n      getPosition: (d, {index,target}) => {\n        target[0] = lng[count - 1 - index];\n        target[1] = lat[count - 1 - index];\n        return target;\n      },\n    }));\n  }\n  makePoints({lng, lat, onHover, onClick}) {\n    return (new ScatterplotLayer({\n      id: `points${lng.length}`,\n      data: {length: lng.length},\n      pickable: true,\n      onHover,\n      onClick,\n      radiusMinPixels: 2,\n      radiusMaxPixels: 20,\n      getRadius: 10,\n      wrapLongitude: true,\n      getPosition: (object, {index,data,target}) => {\n        target[0] = lng[lng.length - 1 - index];\n        target[1] = lat[lng.length - 1 - index];\n        return target;\n      },\n      getFillColor: [100,100,50],\n      getLineColor: [0,0,0],\n    }));\n  }\n  render() {\n    if(this.state == null) {\n      return (<h1>loading very soon!</h1>);\n    }\n    let layers = []; let lhsSims = [];\n    const { pages, lng, lat, title, characterSet, pagepick, pageclick, allsims, farsims, onlyFar, only100kTitles, pointLayer, db, placeToZoom, finishedZoomOnLoad } = this.state;\n    const sims = onlyFar ? farsims : allsims;\n    const titleProp = only100kTitles ? \"first100kTitles\" : \"allTitles\";\n    const titleLayer = this.state[titleProp];\n    const activePageHighlight = pagepick || pageclick;\n    if(pages != null) {\n      if(db && lat && lng && title && placeToZoom !== null) {\n        const firstSuggestion = inputToLabelledIds({db, title, input: placeToZoom}).find(({label}) => label === placeToZoom);\n        if(!firstSuggestion) {\n          this.setState({placeToZoom: null, finishedZoomOnLoad: true});\n        } else {\n          const initialMove = this.zoomTo({pageIndex: firstSuggestion.value, anchor: placeToZoom});\n          initialMove.viewState.onTransitionEnd = () => this.setState({finishedZoomOnLoad: true});\n          this.setState({...initialMove, placeToZoom: null});\n        }\n      }\n      // performance SIGNIFICANTLY increases for a million points and strings\n      // when you reuse the same objects every render call\n      // when reusing text and making new points, the perf drops from 10fps to 1fps\n      // making new text takes about a minute so that is a nonstarter\n      // TODO: optimize TextLayer to be able to render a million strings into GPU buffers for 20M multi-icons\n      // between not rendering two passes of foreground and background for the multi-icon sprite sheet, and halving the precision on all of the float buffers (16-bit for most, 32-bit for positions over which text is going), and maybe saving some room at the bottom of the sprite sheet for a large blank background around all text as 1.2M sprites to rasterize at the beginning, it would be possible to build on the existing functionality, but, not today.\n      if(finishedZoomOnLoad && !titleLayer) {\n        const count = only100kTitles ? 100000 : 500000;\n        const onHover = ({index, picked}) => this.setState({pagepick: picked ? count - 1 - index + 1 : null});\n        const onClick = ({index, picked}) => { this.setState({pageclick: picked ? count - 1 - index + 1 : null }) ; window.location.hash = title.get(count - 1 - index) };\n        setTimeout(() => this.setState({[titleProp]: this.makeTitles({lng, lat, title, characterSet, onHover, onClick, count})}),0);\n      }\n      if(!pointLayer && lng) {\n        const onHover = ({index, picked}) => this.setState({pagepick: picked ? lng.length - 1 - index + 1 : null});\n        const onClick = ({index, picked}) => { this.setState({pageclick: picked ? lng.length - 1 - index + 1 : null }) ; window.location.hash = title.get(lng.length - 1 - index) };\n        this.setState({pointLayer: this.makePoints({lng, lat, onHover, onClick})});\n      }\n      layers.push(pointLayer); layers.push(titleLayer);\n      if(!!activePageHighlight && !!sims && !!pointLayer && !!pointLayer.context) {\n        const pagepickcoords = [lng[activePageHighlight - 1], lat[activePageHighlight - 1]];\n        const pagesims = Array.from(sims.values(), c => c[activePageHighlight]).filter(n => n > 0);\n        pagesims.sort((a,b) => (b & 255) - (a & 255));\n        const {context: {viewport}} = pointLayer;\n        const pagesimlats = pagesims.map(p => lat[(p >> 8) - 1]);\n        const pagesimlngs = pagesims.map(p => lng[(p >> 8) - 1]);\n        const pagesimrgbs = pagesims.map(p => [Math.max(0, 255 - 5 * (p & 255)), Math.min(2 * (p & 255), 255), Math.min(5 * (p & 255),255)]);\n        const [sourceX, sourceY] = viewport.project(pagepickcoords);\n        const pagesimangles = pagesims.map((p,i) => {\n          const [targetX, targetY] = viewport.project([pagesimlngs[i], pagesimlats[i]]);\n          const d = Math.atan2(sourceY - targetY, targetX - sourceX) * 180 / Math.PI;\n          return (d + 360) % 360;\n        });\n        const shimFromCenter = Array.from({length: 50}).join(\" \");\n        const simlines = new LineLayer({\n          id: `line-layer-${activePageHighlight}`,\n          data: pagesims,\n          getWidth: 20,\n          getSourcePosition: pagepickcoords,\n          getTargetPosition: (d,{index}) => [pagesimlngs[index], pagesimlats[index]],\n          getColor: (d,{index}) => pagesimrgbs[index],\n        });\n        layers.push(simlines);\n        const monochromesimtexts = new TextLayer({\n          id: `text-layer-${activePageHighlight}`,\n          data: {length: pagesims.length + 1},\n          characterSet,\n          backgroundColor: [234,255,234],\n          fontFamily: '\"Roboto Slab\"',\n          getSize: 30,\n          getPosition: pagepickcoords,\n          getAngle: ((d,{index}) => index === pagesims.length ? 0 : pagesimangles[index]),\n          getTextAnchor: ((d,{index}) => index === pagesims.length ? 'middle' : 'start'),\n          getColor: ((d, {index}) => index === pagesims.length ? [0,0,0] : pagesimrgbs[index]),\n          getText: ((d, {index}) => index === pagesims.length ? `    ${title.get(activePageHighlight-1)}    ` : `${shimFromCenter}${title.get((pagesims[index] >> 8) - 1)}  `),\n        });\n        layers.push(monochromesimtexts);\n        const simIndicesByAngle = Array.from({length: pagesims.length}, (v,i) => i);\n        simIndicesByAngle.sort((a,b) => pagesimangles[a] - pagesimangles[b]);\n        lhsSims = simIndicesByAngle.map(i => {\n          const pageIndex = (pagesims[i] >> 8)-1;\n          return ({color: pagesimrgbs[i], name: title.get(pageIndex), pageIndex});\n        });\n      }\n    }\n    const autocompleteIsDisabled = !(db && title);\n    return (\n    <div>\n      <div id=\"colophon\">© Lee Butterman 2020. Made in Oakland, California.</div>\n      <div id=\"searchresults\">\n        <div>\n          {lng ? `${lng.length} places. ` : \"Loading places. \"}\n          {sims ? \"\" : \"Loading similarities. \"}\n          {titleLayer ? \"\" : \"Adding place labels. \"}\n        </div>\n        <br/>\n        {\n          !only100kTitles ? null : (\n            <div>\n              <input id=\"is100k\" type=\"checkbox\" checked={only100kTitles} onChange={e => window.confirm(\"Preparing half a million titles to render takes a minute. Are you sure you want to wait?\") ? this.setState({only100kTitles: false}) : true } />\n              <label htmlFor=\"is100k\"> top 100k labels only</label>\n            </div>)\n        }\n        <div>\n          <input id=\"isfar\" type=\"checkbox\" checked={onlyFar} onChange={e => this.setState({onlyFar: e.target.checked})} disabled={!sims} />\n          <label htmlFor=\"isfar\"> distant relations only {sims ? \"\" : \"(loading)\"} </label>\n        </div>\n        <Select\n          options={ autocompleteIsDisabled ? [] : inputToLabelledIds({db, title, input: this.state.searchboxtext }) }\n          value={ this.state.searchboxtext }\n          filterOption={() => true}\n          onInputChange={ (searchboxtext) => this.setState({searchboxtext}) }\n          onChange={ ({label, value}) => this.setState({...this.zoomTo({pageIndex: value, anchor: label}), searchboxtext: label}) }\n          isDisabled={autocompleteIsDisabled}\n          placeholder={autocompleteIsDisabled ? 'Loading autocomplete' : 'Search'}\n        />\n        <div id=\"radiallist\">\n          { lhsSims.length > 0 ? (<div><br/>↶ Similar to {title.get(activePageHighlight-1)}:</div>) : null}\n          {\n            lhsSims.map(({color, name, pageIndex}) => (\n              <a key={`lhs-${activePageHighlight}-${pageIndex}`}\n                href=\"#\"\n                onClick={(e) => { if(e) e.preventDefault(); this.setState({...this.zoomTo({pageIndex, anchor: name})})}}\n                style={{display: \"block\", color: \"white\", backgroundColor: `rgb(${color.join(',')})`}}>\n                { name }\n              </a>\n            ))\n          }\n        </div>\n      </div>\n      <div>\n          <DeckGL viewState={this.state.viewState} controller={true} layers={layers} id={\"maincanvas\"} onViewStateChange={({viewState}) => this.setState({viewState})} />\n      </div>\n    </div>);\n  }\n\n  zoomTo({pageIndex, anchor}) {\n    window.location.hash = anchor;\n    return ({\n      pageclick: pageIndex + 1,\n      viewState: {\n        ...this.state.viewState,\n        longitude: this.state.lng[pageIndex],\n        latitude: this.state.lat[pageIndex],\n        zoom: this.state.onlyFar ? 9 : 11,\n        transitionDuration: 'auto',\n        transitionInterpolator: new FlyToInterpolator(),\n        transitionEasing: t => smoothstep(smoothstep(t)),\n      }\n    })\n  }\n}\n\nconst sqlselect = \"select rowid from titles where titles match ? order by rowid limit 40\";\nconst inputToLabelledIds = ({db,input,title}) => Array.from(inputToRowids({db,input}), i => ({value: i-1, label: title.get(i-1)}));\nconst inputToRowids = function* ({db,input}) {\n  const statement = db.prepare(sqlselect);\n  statement.bind([inputToFTSQuery(input)]);\n  while (statement.step()) {\n    yield statement.getAsObject().rowid;\n  }\n}\nconst inputToFTSQuery = (s) => s.toLocaleLowerCase().split(/[^a-z0-9\\u0080-\\uFFFF]+/).filter(n => n.length > 0).join(' NEAR ') + '*';\nconst smoothstep = t => 3 * t * t - 2 * t * t * t;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}