{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sliderToValue","n","Math","pow","App","props","state","value1","value2","value3","value4","value5","this","sliders","map","v","join","className","type","max","min","value","onChange","e","setState","target","src","filenamesFromSliders","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAGMA,G,MAAgB,SAACC,GAAD,OAAa,IAANA,EAAU,EAAIC,KAAKC,IAAI,EAAGF,EAAE,KAkC1CG,E,YA/Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,GAFjD,E,oFAIK,IAAD,EAC4BC,KAAKN,MAEhDO,EADa,CAFE,EACdN,OADc,EACNC,OADM,EACEC,OADF,EACUC,OADV,EACkBC,QAEZG,KAAI,SAAAC,GAAC,OAAIf,EAAce,MAAIC,KAAK,KAC3D,MAAM,SAAN,OAAgBH,EAAhB,W,+BAEQ,IAAD,OACP,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,WACb,2BAAOC,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGC,MAAOT,KAAKN,MAAMC,OAAQe,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACjB,OAAyB,EAAjBgB,EAAEE,OAAOJ,WAD/G,sBACkJrB,EAAcY,KAAKN,MAAMC,QAD3K,IACoL,6BAClL,2BAAOW,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGC,MAAOT,KAAKN,MAAME,OAAQc,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAChB,OAAyB,EAAjBe,EAAEE,OAAOJ,WAF/G,mBAE+IrB,EAAcY,KAAKN,MAAME,QAFxK,IAEiL,6BAC/K,2BAAOU,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGC,MAAOT,KAAKN,MAAMG,OAAQa,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACf,OAAyB,EAAjBc,EAAEE,OAAOJ,WAH/G,qBAGiJrB,EAAcY,KAAKN,MAAMG,QAH1K,IAGmL,6BACjL,2BAAOS,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGC,MAAOT,KAAKN,MAAMI,OAAQY,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACd,OAAyB,EAAjBa,EAAEE,OAAOJ,WAJ/G,qBAIiJrB,EAAcY,KAAKN,MAAMI,QAJ1K,IAImL,6BACjL,2BAAOQ,KAAK,QAAQC,IAAK,EAAGC,IAAK,EAAGC,MAAOT,KAAKN,MAAMK,OAAQW,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACb,OAAyB,EAAjBY,EAAEE,OAAOJ,WAL/G,qBAKiJrB,EAAcY,KAAKN,MAAMK,QAL1K,IAKmL,8BAEnL,6BACE,yBAAKe,IAAMd,KAAKe,+B,GAtBRC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ead30d98.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst sliderToValue = (n) => n === 0 ? 0 : Math.pow(8, n-1);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {value1: 2, value2: 2, value3: 2, value4: 2, value5: 2};\n  }\n  filenamesFromSliders() {\n    const {value1, value2, value3, value4, value5} = this.state;\n    const rawSliders = [value1, value2, value3, value4, value5];\n    const sliders = rawSliders.map(v => sliderToValue(v)).join('-');\n    return `faces-${sliders}.webp`;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"sliders\">\n          <input type=\"range\" max={3} min={0} value={this.state.value1} onChange={e => this.setState({value1: e.target.value * 1})} /> --use_l1_penalty  {sliderToValue(this.state.value1)} <br/>\n          <input type=\"range\" max={3} min={0} value={this.state.value2} onChange={e => this.setState({value2: e.target.value * 1})} /> --use_vgg_loss {sliderToValue(this.state.value2)} <br/>\n          <input type=\"range\" max={3} min={0} value={this.state.value3} onChange={e => this.setState({value3: e.target.value * 1})} /> --use_pixel_loss {sliderToValue(this.state.value3)} <br/>\n          <input type=\"range\" max={3} min={0} value={this.state.value4} onChange={e => this.setState({value4: e.target.value * 1})} /> --use_mssim_loss {sliderToValue(this.state.value4)} <br/>\n          <input type=\"range\" max={3} min={0} value={this.state.value5} onChange={e => this.setState({value5: e.target.value * 1})} /> --use_lpips_loss {sliderToValue(this.state.value5)} <br/>\n        </div>\n        <div>\n          <img src={ this.filenamesFromSliders()} />\n        </div>\n        {/* <header className=\"App-header\">\n          head\n        </header> */}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}